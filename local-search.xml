<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>hexo 创建新的文章</title>
    <link href="/2022/07/24/hexo-%E5%88%9B%E5%BB%BA%E6%96%B0%E7%9A%84%E6%96%87%E7%AB%A0/"/>
    <url>/2022/07/24/hexo-%E5%88%9B%E5%BB%BA%E6%96%B0%E7%9A%84%E6%96%87%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<p>本网站主要采用的hexo的方式搭建博客界面，为了更好地方便的更新操作，这里主要讲述一下hexo的配置过程，以及文章发布的过程。</p><span id="more"></span><p><a href="https://hexo.io/zh-cn/">Hexo</a>是一种快速、简洁且高效的博客框架，其具有较好的拓展性以及简洁性，支持Markdown语法。接下来，我们将从安装、更新以及部署的角度进行进一步的阐述。</p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>安装 Hexo 需要提前具备 <a href="https://nodejs.org/en/">Node.js</a> 以及 <a href="https://git-scm.com/">git</a> 工具。在安装完成工具之后，我们就可以进行Hexo的安装。</p><h2 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h2><p>所有必备的应用程序安装完成后，即可使用npm完成安装Hexo。我们在控制台键入如下命令：</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">$ npm install -g Hexo-<span class="hljs-keyword">cli</span><br></code></pre></td></tr></table></figure><p>等待安装完成之后，即可执行如下命令，Hexo 将会在指定的文件夹中新建需要的文件</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$</span> hexo init &lt;文件夹的名称&gt;<br><span class="hljs-variable">$</span> <span class="hljs-built_in">cd</span> &lt;文件夹的名称&gt;<br><span class="hljs-variable">$</span> npm install<br></code></pre></td></tr></table></figure><p>此时，对应的新建的文件夹的目录结构如下所示：</p><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sqf">.<br>├── <span class="hljs-variable">_config</span>.yml<br>├── package.json<br>├── scaffolds<br>├── source<br>|   ├── <span class="hljs-variable">_drafts</span><br>|   └── <span class="hljs-variable">_posts</span><br>└── themes<br></code></pre></td></tr></table></figure><p>其中，themes中可以放置我们想要采用的主题。我们以fluid主题为例：</p><h2 id="主题的更新"><a href="#主题的更新" class="headerlink" title="主题的更新"></a>主题的更新</h2><p>我们可以下载fluid的最新<a href="https://github.com/fluid-dev/Hexo-theme-fluid/releases">release</a>版本，并将解压出的文件夹重命名为fluid。</p><h3 id="指定主题"><a href="#指定主题" class="headerlink" title="指定主题"></a>指定主题</h3><p>在下载完成之后，我们可以修改对应文件夹目录下的 <code>_config.yml</code> ,使之对应的主题为fluid。</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-meta"># 需要注意的是 “:” 与后续的文本需要以空格隔开</span><br><span class="hljs-symbol">theme:</span> fluid  <span class="hljs-meta"># 指定主题</span><br><span class="hljs-symbol">language:</span><span class="hljs-built_in">zh</span>-CN <span class="hljs-meta"># 指定语言</span><br></code></pre></td></tr></table></figure><p>此时，我们就可以将主题更换成我们想要更换的形式。</p><h1 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h1><p>配置好相应的 Hexo 主体之后，我们就可以更新我们的博客信息。首先，我们需要新建对应的页面,我们需要现在对应的博客目录下，键入如下命令：</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">$ hexo <span class="hljs-keyword">new</span> <span class="hljs-string">&quot;博客的标题&quot;</span><br></code></pre></td></tr></table></figure><p>等待执行完毕之后，我们就可以在<code>source/_post/ </code> 目录下找到我们新生成的页面信息。此时，我们就可以按照 Markdown 的语法标准书写相关的内容信息。<br>编写完成之后，我们可以在控制台中键入如下命令：</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs clean">$ hexo clean ## 清空缓存<br>$ hexo g  ## 静态页面的部署<br>$ hexo d  ## 推送到服务器上<br></code></pre></td></tr></table></figure><p>此时,我们就可以通过如下命令，实现在本机上的查看操作：</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta">$ hexo <span class="hljs-keyword">server</span><br></code></pre></td></tr></table></figure><p>此时，我们就可以在<a href="http://localhost:5000/">5000端口</a>查看。为了方便后续的查看操作，我们可以将对应的网站部署在github上，方便后续的查看。</p><h1 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h1><h2 id="配置-Git"><a href="#配置-Git" class="headerlink" title="配置 Git"></a>配置 Git</h2><p>为了方便部署，我们需要结合 git 工具，实现对应的查看操作。首先，我们需要绑定注册邮箱以及注册用户名，我们需要打开 git bash，并在其中键入如下命令：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">$ git config <span class="hljs-attr">--global</span> user<span class="hljs-selector-class">.name</span> <span class="hljs-string">&quot;此处填写你注册时的用户名&quot;</span><br>$ git config <span class="hljs-attr">--global</span> user<span class="hljs-selector-class">.email</span> <span class="hljs-string">&quot;此处填写你注册时的邮箱&quot;</span><br></code></pre></td></tr></table></figure><p>此时，我们即将 git 工具与我们的账号进行绑定。</p><h2 id="配置-github"><a href="#配置-github" class="headerlink" title="配置 github"></a>配置 github</h2><h3 id="创建："><a href="#创建：" class="headerlink" title="创建："></a>创建：</h3><p>我们需要新建一个名为你的用户名的github.io的仓库。对应的命名规则如下所示：</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clean">UserName.github.io  ## 其中UserName为用户名<br></code></pre></td></tr></table></figure><p>需要注意的是：</p><pre><code class="hljs">· 注册的邮箱一定要验证· 仓库名字必须是：UserName.github.io</code></pre><p>创建完毕之后，我们还需要配置相应的 SSH 免密登录。</p><h2 id="配置-SSH-免密登录"><a href="#配置-SSH-免密登录" class="headerlink" title="配置 SSH 免密登录"></a>配置 SSH 免密登录</h2><p>为了更加方便提交代码内容，同时为了避免使用直接使用用户名和密码，我们通过 ssh key 的方式来解决本地和服务器的链接问题。也就是，通过这种方式给予本机访问 github 仓库的权限。</p><h3 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h3><p>1.创建一个git bash 秘钥。我们需要在 git bash 中键入如下命令，生成对应的秘钥信息：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">$ <span class="hljs-attribute">ssh</span>=keygen =t rsa -C <span class="hljs-string">&quot;邮箱&quot;</span><br></code></pre></td></tr></table></figure><p>然后enter三连，（如果想要键入自己的密码信息，我们可以在键入一个enter之后键入自己的密码内容）。此时，会在对应位置生成</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs clean">.<br>├── id_rsa ## 私钥内容<br>├── id_rsa.pub ## 公钥内容<br><br></code></pre></td></tr></table></figure><p>此时，我们需要将公钥内容添加到github中</p><p>2.在github中添加SSH key。我们可以以记事本的方式打开对应的id_rsa.pub内容，并将其中的内容粘贴到对应的key中，其中title可以随意填写。配置完成之后，我们可以通过如下命令检验我们的SSH key是否连接成功：</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-variable">$ </span>ssh -T git<span class="hljs-variable">@github</span>.com<br><br></code></pre></td></tr></table></figure><p>3._config.yml的配置。在添加完成之后，我们需要在对应的配置文件中添加如下的内容：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">&#x27;git&#x27;</span><br>  <span class="hljs-attr">repo:</span> <br>    <span class="hljs-attr">github:</span> <span class="hljs-string">git@github.com:UserName/UserName.github.io.git,master</span> <span class="hljs-comment">## 其中UserName 为对应的用户名称</span><br></code></pre></td></tr></table></figure><p>4.添加完成之后,我们即可通过如下命令进行查看，为了避免上次的缓存信息对本次的查询带来干扰，对应的命令如下所示：</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-variable">$ </span>hexo clean<br><span class="hljs-variable">$ </span>hexo g<br><span class="hljs-variable">$ </span>hexo d<br></code></pre></td></tr></table></figure><p>键入完成之后，我们就可以在 <a href="http://username.github.io/">http://UserName.github.io</a> 中进行查看。其中，UserName为用户的id信息。</p><p>如上即为Hexo的配置过程。</p>]]></content>
    
    
    <categories>
      
      <category>博客搭建</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo 入门</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
